---
title: "PK Dataset Analysis"
date: "`r Sys.Date()`"
output:
  officedown::rdocx_document:
    toc: true
    toc_depth: 3
    fig_width: 6.5
params:
  dataFile:
    label: "Dataset"
    value: "dataset.csv"
    input: file
  metadataFile:
    label: "Metadata"
    value: "metadata.csv"
    input: file
  bins:
    label: "Bins for summary statistics"
    value: 5
    input: slider
    min: 1
    max: 20
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = FALSE,
  comment = "#>",
  dev = "ragg_png",
  fig.align = "center",
  fig.width = 6.5
)
library(flextable)
library(tidyverse)
library(GGally)

get_field <- function(data, field_name, type_name) {
  data |>
    filter(Type %in% type_name) |>
    pull(field_name)
}
to_label <- function(label, unit) {
  no_unit <- (is.na(unit) | unit %in% "")
  return(paste0(label, ifelse(no_unit, "", paste0(" [", unit, "]"))))
}
get_label <- function(var_names, mapping) {
  selected_rows <- sapply(var_names, function(var_name){which(mapping$Name %in% var_name)})
  return(to_label(mapping$Label[selected_rows], mapping$Unit[selected_rows]))
}

data <- read.csv(params$dataFile)
metadata <- read.csv(params$metadataFile)

id_var <- get_field(metadata, field_name = "Name", type_name = "id")
evid_var <- get_field(metadata, field_name = "Name", type_name = "evid")
mdv_var <- get_field(metadata, field_name = "Name", type_name = "mdv")
time_var <- get_field(metadata, field_name = "Name", type_name = "time")
tad_var <- get_field(metadata, field_name = "Name", type_name = "tad")
dv_var <- get_field(metadata, field_name = "Name", type_name = "dv")
amt_var <- get_field(metadata, field_name = "Name", type_name = "amt")
blq_var <- get_field(metadata, field_name = "Name", type_name = "blq")
lloq_var <- get_field(metadata, field_name = "Name", type_name = "lloq")

cov_var <- metadata |> filter(Type %in% "cov")
cat_var <- metadata |> filter(Type %in% "cat")

sum_data <- data |>
  group_by(.data[[id_var]]) |>
  summarise_all(first)
```
  
## Data summary

### Doses and observations

The dataset included __`r sum(data[[mdv_var]] %in% 0)`__ observations and __`r sum(data[[evid_var]] %in% c(1, 4))`__ dose events from __`r n_distinct(data[[id_var]])`__ subjects. 

`r ifelse(length(blq_var)==0, "", paste0("The dataset included __", sum(data[[blq_var]] > 0), "__ BLQ observations, corresponding to __", round(100 * sum(data[[blq_var]] > 0) / sum(data[[mdv_var]] %in% 0), 1), " %__ of the total observations."))`

### Covariates

__Table__: Summary of continuous covariates

```{r continuous_covariates, results='asis', eval=nrow(cov_var)>0}
sum_data |>
  select(all_of(cov_var$Name)) |>
  pivot_longer(
    cols = everything(),
    names_to = "Covariate",
    values_to = "Values"
  ) |>
  group_by(Covariate) |>
  summarise(
    N = sum(!is.na(Values)),
    Mean = mean(Values, na.rm = TRUE),
    Median = median(Values, na.rm = TRUE),
    SD = sd(Values, na.rm = TRUE),
    Min = min(Values, na.rm = TRUE),
    Max = max(Values, na.rm = TRUE)
  ) |>
  mutate(Covariate = get_label(Covariate, cov_var)) |>
  flextable() |>
  colformat_double(digits = 2)
```


__Table__: Summary of categorical covariates

```{r categorical_covariates, results='asis', eval=nrow(cat_var)>0}
sum_data |>
  select(all_of(cat_var$Name)) |>
  mutate_all(as.factor) |>
  pivot_longer(
    cols = everything(),
    names_to = "Covariate",
    values_to = "Values"
  ) |>
  group_by(Covariate) |>
  summarise(
    Categories = paste(unique(Values), collapse = "\n"),
    N = sum(!is.na(Values)),
    `Distinct Categories` = n_distinct(Values),
    Count = paste(sapply(
      unique(Values),
      function(category) {
        sum(Values %in% category)
      }
    ), collapse = "\n"),
    Percent = paste(sapply(
      unique(Values),
      function(category) {
        round(100 * sum(Values %in% category) / n(), 1)
      }
    ), collapse = "\n")
  ) |>
  mutate(Covariate = get_label(Covariate, cat_var)) |>
  flextable()
```


## Time Profiles

__Figure__: Time profile in linear scale

```{r time_profile_lin, warning=FALSE}
time_breaks <- unique(
  quantile(
    data |> filter(.data[[mdv_var]] == 0) |> pull(.data[[time_var]]),
    probs = seq(0, 1, length.out = params$bins + 1)
  )
)

bin_data <- data |>
  filter(.data[[mdv_var]] == 0) |>
  mutate(
    TimeBins = cut(.data[[time_var]], breaks = time_breaks, include.lowest = TRUE),
    # Creates a specific DV accounting for BLQ data
    LLOQ_VAR = .data[[dv_var]],
    BLQ_VAR = 0,
    DV_BLQ = ifelse(
      .data[[ifelse(length(blq_var) > 0, blq_var, "BLQ_VAR")]] > 0,
      .data[[ifelse(length(lloq_var) > 0, lloq_var, "LLOQ_VAR")]],
      .data[[dv_var]]
    )
  )

vpc_data <- bin_data |>
  group_by(TimeBins) |>
  summarise(
    time = median(.data[[time_var]]),
    dv_min = quantile(.data[["DV_BLQ"]], probs = 0.05),
    dv_max = quantile(.data[["DV_BLQ"]], probs = 0.95),
    dv = median(.data[["DV_BLQ"]])
  )

time_plot_lin <- ggplot(
  data = vpc_data,
  mapping = aes(x = time, y = dv)
) +
  theme_bw() +
  geom_point(
    data = bin_data,
    mapping = aes(
      x = .data[[time_var]],
      y = DV_BLQ,
      color = ifelse(.data[[ifelse(length(blq_var) > 0, blq_var, "BLQ_VAR")]] <= 0, "Observed", "BLQ")
    )
  ) +
  geom_line(mapping = aes(y = dv_min, linetype = "5th-95th percentiles"), color = "dodgerblue") +
  geom_line(mapping = aes(y = dv_max, linetype = "5th-95th percentiles"), color = "dodgerblue") +
  geom_line(mapping = aes(linetype = "median"), color = "tomato") +
  scale_linetype_manual(values = rep("solid", 2)) +
  scale_color_manual(values = c("Observed" = "black", "BLQ" = "grey")) +
  labs(
    x = get_label(time_var, metadata),
    y = get_label(dv_var, metadata),
    linetype = "Statistics",
    color = "Data"
  )

time_plot_lin
```

__Figure__: Time profile in log scale

```{r time_profile_log, warning=FALSE}
log_ticks <- rep(c(1, 2, 5), 13) * 10^rep(-6:6, each = 3)

time_plot_lin +
  scale_y_log10(breaks = log_ticks) +
  annotation_logticks(sides = "l")
```

`r ifelse(length(tad_var)==0, "", "__Figure__: Time after dose profile in linear scale")`

```{r tad_profile_lin, warning=FALSE, eval=length(tad_var)>0}
tad_breaks <- unique(
  quantile(
    data |> filter(.data[[mdv_var]] == 0) |> pull(.data[[tad_var]]),
    probs = seq(0, 1, length.out = params$bins + 1)
  )
)

bin_data <- data |>
  filter(.data[[mdv_var]] == 0) |>
  mutate(
    TimeBins = cut(.data[[tad_var]], breaks = tad_breaks, include.lowest = TRUE),
    # Creates a specific DV accounting for BLQ data
    LLOQ_VAR = .data[[dv_var]],
    BLQ_VAR = 0,
    DV_BLQ = ifelse(
      .data[[ifelse(length(blq_var) > 0, blq_var, "BLQ_VAR")]] > 0,
      .data[[ifelse(length(lloq_var) > 0, lloq_var, "LLOQ_VAR")]],
      .data[[dv_var]]
    )
  )

vpc_data <- bin_data |>
  group_by(TimeBins) |>
  summarise(
    time = median(.data[[tad_var]]),
    dv_min = quantile(.data[["DV_BLQ"]], probs = 0.05),
    dv_max = quantile(.data[["DV_BLQ"]], probs = 0.95),
    dv = median(.data[["DV_BLQ"]])
  )

tad_plot_lin <- ggplot(
  data = vpc_data,
  mapping = aes(x = time, y = dv)
) +
  theme_bw() +
  geom_point(
    data = bin_data,
    mapping = aes(
      x = .data[[tad_var]],
      y = DV_BLQ,
      color = ifelse(.data[[ifelse(length(blq_var) > 0, blq_var, "BLQ_VAR")]] <= 0, "Observed", "BLQ")
    )
  ) +
  geom_line(mapping = aes(y = dv_min, linetype = "5th-95th percentiles"), color = "dodgerblue") +
  geom_line(mapping = aes(y = dv_max, linetype = "5th-95th percentiles"), color = "dodgerblue") +
  geom_line(mapping = aes(linetype = "median"), color = "tomato") +
  scale_linetype_manual(values = rep("solid", 2)) +
  scale_color_manual(values = c("Observed" = "black", "BLQ" = "grey")) +
  labs(
    x = get_label(tad_var, metadata),
    y = get_label(dv_var, metadata),
    linetype = "Statistics",
    color = "Data"
  )

tad_plot_lin
```

`r ifelse(length(tad_var)==0, "", "__Figure__: Time after dose profile in log scale")`

```{r tad_profile_log, warning=FALSE, eval=length(tad_var)>0}
tad_plot_lin +
  scale_y_log10(breaks = log_ticks) +
  annotation_logticks(sides = "l")
```

`r ifelse(length(blq_var)==0, "", "__Figure__: Proportion of BLQ data")`

```{r blq_profile, warning=FALSE, eval=length(blq_var)>0}
blq_data <- data |>
  filter(.data[[mdv_var]] == 0) |>
  mutate(
    TimeBins = cut(.data[[time_var]], breaks = time_breaks, include.lowest = TRUE)
  ) |>
  group_by(TimeBins) |>
  summarise(
    time = median(.data[[time_var]]),
    blq = 100 * sum(.data[[blq_var]] > 0) / n()
  )

blq_plot <- ggplot(
  data = blq_data,
  mapping = aes(x = time, y = blq)
) +
  theme_bw() +
  geom_line() +
  labs(x = get_label(time_var, metadata), y = "Proportion of BLQ data [%]")

blq_plot
```

`r ifelse(any(length(blq_var)==0,length(tad_var)==0), "", "__Figure__: Proportion of BLQ data as a function of time after dose")`

```{r blq_tad_profile, warning=FALSE, eval=all(length(blq_var)>0,length(tad_var)>0)}
blq_data <- data |>
  filter(.data[[mdv_var]] == 0) |>
  mutate(
    TimeBins = cut(.data[[tad_var]], breaks = tad_breaks, include.lowest = TRUE)
  ) |>
  group_by(TimeBins) |>
  summarise(
    time = median(.data[[tad_var]]),
    blq = 100 * sum(.data[[blq_var]] > 0) / n()
  )

blq_plot <- ggplot(
  data = blq_data,
  mapping = aes(x = time, y = blq)
) +
  theme_bw() +
  geom_line() +
  labs(x = get_label(tad_var, metadata), y = "Proportion of BLQ data [%]")

blq_plot
```

## Covariates

__Figure__: Pairwise relationships between covariates

```{r covariate_relationships, warning=FALSE, message=FALSE}
cat_variables <- get_field(metadata, field_name = "Name", type_name = "cat")

ggpairs(
  sum_data |>
    mutate(across(all_of(cat_variables), as.factor)),
  columns = c(cov_var$Name, cat_var$Name),
  columnLabels = get_label(c(cov_var$Name, cat_var$Name), metadata),
  upper = list(
    continuous = "cor",
    combo = "box_no_facet", # summarise_by
    discrete = "colbar",
    na = "na"
  ),
  lower = list(
    continuous = wrap("smooth_loess", se = FALSE),
    combo = "box_no_facet",
    discrete = "colbar",
    na = "na"
  ),
  diag = list(
    continuous = wrap("barDiag", bins = 11),
    discrete = "barDiag",
    na = "naDiag"
  )
) +
  theme_bw()
```

## Appendix: Inputs

### Dataset

__Table__: 10 first rows of dataset

```{r dataset, results='asis'}
data |>
  head(n = 10) |>
  flextable() |>
  colformat_double(digits = 2)
```

### Mapping

__Table__: metadata

```{r metadata, results='asis'}
metadata |> flextable()
```
